Number
	| ( 0-9 )+

String
	| ( "'" | '"' | "`" ) ( \S\s )+ ( "'" | '"' | "`" )

Literal
	| Number
	| String
	| "true"
	| "false"
	| "undefined"

Operator
	| "=="
	| "=="
	| "!="
	| "<"
	| "<="
	| ">"
	| ">="
	| "+"
	| "-"
	| "*"
	| "/"

Identifier
	| \w+

Block
	| "{" \S\s* "}"

Tuple
	| "(" Expression ")"

Unary
	| ( "-" | "!" ) Expression

Binary
	| Expression Operator Expression

Expression
	| Literal
	| Unary
	| Binary
	| Tuple
	| Function

Call
	| Identifier ( "(" Arguments? ")" )*

Arguments
	| Expression ( "," ArgumentsIdentifier )*

ArgumentsIdentifier
	| Expression

Parameters
	| ParametersIdentifier ( "," ParametersIdentifier )*

ParametersIdentifier
	| ( Type? Identifier PickExpression? AssignmentExpression? )

PickExpression
	| "pick" "{" Parameters "}"

Type
	| "void"
	| "number"
	| "boolean"
	| "symbol"
	| "string"
	| "function"
	| "object"
	| "any"

Declaration
	| FunctionDeclaration
	| VariableDeclaration
	| Statement

FunctionDeclaration
	| "func" Identifier Parameters? Block

FunctionLambda
	| Parameters? "=>" ( Block | Expression | Statement Expression )

Function
	| FunctionDeclaration
	| FunctionLambda

AssignmentExpression
	| Identifier "=" Expression

VariableDeclaration
	| "let" Identifier "="? Expression

ReturnStatement
	| "return" Expression?

IfStatement
	| "if" Expression Block ( "else" ( IfStatement | Block ) )*?

SwitchStatement
	| "switch" Expression Block

MatchStatement
	| "match" Expression Block

TryStatement
	| "try" Block ( "catch" Parameters? Block )? ("finally" Block )?

Statement
	| ExpressionStatement
	| ReturnStatement
	| IfStatement
	| SwitchStatement
	| MatchStatement
	| TryStatement
	| Block
