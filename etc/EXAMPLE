import sys as sys
import net as {set, get}
import 'https://example.com' as {print} // fetch network bound module?

int number = 64_000
flt number = 64.000
var number = 64.0km
flt number = #0366d6
flt number = 0b01010
flt number = 0xfff01

str string = 'hello @(name), born in @(date)'
obj object = {int a = 0, str b = ''}

obj array = ['abc']
obj array = [['abc']]
obj memory = obj(1024)

fun fib (int n) {
	return n <= 1 ? n : fib(n - 1) + fib(n - 2)
}

def vec (flt x, flt y, flt z) {
	var memory = var(1024)
	fun execute (....args) => memory[1024] * 4
}

fun dot (obj a, obj b) {
	return a.x * b.x + a.y * b.y + a.z * b.z
}

dot(vec(1, 2, 3), vec(4, 5, 6))

fun gen () {
	asm 0x12
	asm mov(rax, 3)
	asm mov(rbx, 4)
	asm add(rax, rbx, rcx)
}

// threads?
while i < 10 {
	await (var a = yield vec(1, 2, 3), var b = yield vec(1, 2, 3)) {
		print(a, b)
	}
}


var fn = (a, b) {}
var fn = (a) {}

var props = {
	var a = 1
	var b = 2
	var c = 3
	var d = a => print(1 * 4)
}

var value = switch type {
	case 0 => 0
	case 2 => sys.print(2)
	case 3, 5 {
		break sys.print(3)
	}
	case 4 {
		sys.print(4)
	}
}

var value = while i > 0 {
	if --i == 0 {
		break 20
	}
}

var array = []

var value = array.pop(1)
var value = array.push(1)
var value = array.fill(1)
var value = array.find((v, i) => v > i)
var value = array.filter((v, i) => v > i)
var value = array.reverse((v, i) => v > i)

// command line
aly --allow-sys/net/asm htp:aly.com
aly --allow-sys/net/asm ftp:aly.com
aly --allow-sys/net/asm ssh:aly.com
aly --allow-sys/net/asm tcp:aly.com
